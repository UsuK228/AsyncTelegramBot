import asyncio
import requests
import logging
import re
import time
import json
import os

from collections import defaultdict
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher
from aiogram.filters import Command
from aiogram.types import Message
from bs4 import BeautifulSoup

API_TOKEN = "YOUR TOKEN FROM BOTFATHER"

bot = Bot(token=API_TOKEN)
dp = Dispatcher()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–Ω—Ç–∏—Ñ–ª—É–¥–∞
FLOOD_LIMIT = 1  # –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π
TIME_LIMIT = 4  # –í —Å–µ–∫—É–Ω–¥–∞—Ö, –∑–∞ –∫–æ—Ç–æ—Ä–æ–µ –Ω–µ–ª—å–∑—è –ø—Ä–µ–≤—ã—à–∞—Ç—å –ª–∏–º–∏—Ç
BAN_TIME = 4  # –í —Å–µ–∫—É–Ω–¥–∞—Ö, –Ω–∞ —Å–∫–æ–ª—å–∫–æ –±–∞–Ω–∏—Ç—å —Ñ–ª—É–¥–µ—Ä–∞

user_messages = defaultdict(list)
banned_users = {}
USER_DATA_FILE = "user_data.json"

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
)
logger = logging.getLogger(__name__)


def log_command(message):
    logger.info(
        f"Command: {message.text} | "
        f"User: {message.from_user.id} | "
        f"Username: @{message.from_user.username} | "
        f"Chat: {message.chat.id} ({message.chat.type})"
    )


class UserBalance:
    def __init__(self):
        self.data = self.load_data()

    @staticmethod
    def load_data():
        if os.path.exists(USER_DATA_FILE):
            with open(USER_DATA_FILE, 'r') as f:
                return json.load(f)
        return {}

    def save_data(self):
        with open(USER_DATA_FILE, 'w') as f:
            json.dump(self.data, f)

    def init_user(self, user_id):
        if str(user_id) not in self.data:
            self.data[str(user_id)] = {
                'balance': 500,  # –°—Ç–∞—Ä—Ç–æ–≤—ã–π –±–∞–ª–∞–Ω—Å
                'activated': True
            }
            self.save_data()

    def get_balance(self, user_id):
        self.init_user(user_id)
        return self.data[str(user_id)]['balance']

    def update_balance(self, user_id, amount):
        self.init_user(user_id)
        self.data[str(user_id)]['balance'] += amount
        self.save_data()
        return self.data[str(user_id)]['balance']

    async def balance_refill_task(self):
        while True:
            await asyncio.sleep(600)  # 10 –º–∏–Ω—É—Ç = 600 —Å–µ–∫—É–Ω–¥
            await self.refill_all_balances()

    async def refill_all_balances(self):
        refill_amount = 200
        now = datetime.now()

        for user_id in list(self.data.keys()):
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∫–æ–≥–¥–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞–∑ –ø–æ–ø–æ–ª–Ω—è–ª–∏ –±–∞–ª–∞–Ω—Å
            last_refill = self.data[user_id].get('last_refill')
            if not last_refill or (now - datetime.fromisoformat(last_refill)) >= timedelta(minutes=10):
                self.data[user_id]['balance'] += refill_amount
                self.data[user_id]['last_refill'] = now.isoformat()

        #        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        #        try:
        #            await bot.send_message(
        #                chat_id=int(user_id),
        #                text=f"üîÑ –í–∞—à –±–∞–ª–∞–Ω—Å –ø–æ–ø–æ–ª–Ω–µ–Ω –Ω–∞ {refill_amount}‚ÇΩ (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç)"
        #            )
        #        except Exception as e:
        #            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

        self.save_data()
        logger.info(f"Balance automatically refilled, data: {now}")

user_balance = UserBalance()

async def check_flood(message):
    user_id = message.from_user.id

    if user_id in banned_users:
        if datetime.now() < banned_users[user_id]:
            return True
        else:
            del banned_users[user_id]

    user_messages[user_id].append(datetime.now())

    user_messages[user_id] = [
        msg_time for msg_time in user_messages[user_id]
        if datetime.now() - msg_time < timedelta(seconds=TIME_LIMIT)
    ]

    if len(user_messages[user_id]) > FLOOD_LIMIT:
        message.answer("–ù–µ —Ñ–ª—É–¥–∏—Ç–µ!")
        banned_users[user_id] = datetime.now() + timedelta(seconds=BAN_TIME)
        logger.warning(f"User {user_id} (@{message.from_user.username}) banned for flooding for {BAN_TIME} seconds")
        return True

    return False


@dp.message(Command("start"))
async def send_start(message: Message):
    if await check_flood(message):
        return

    log_command(message)

    user_balance.init_user(message.from_user.id)

    await message.reply(f"""
–ë–∞—Å—É—Ö–∞ –≤ –¥–µ–ª–µ, {message.from_user.full_name}.
–Ø - –≤—Ç–æ—Ä–∞—è –≤–µ—Ä—Å–∏—è –º—É–ª—å—Ç–∏–±–æ—Ç–∞ –æ—Ç –∞–≤—Ç–æ—Ä–∞ UsuK
(–û–Ω –Ω–∞—á–∏–Ω–∞—é—â–∏–π –ø—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç, –Ω–µ –±–µ–π—Ç–µ –µ–≥–æ!)
–ù–∞–ø–∏—à–∏ –∫–æ–º–∞–Ω–¥—É /help –¥–ª—è –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
""")


@dp.message(Command("help"))
async def send_help(message: Message):
    if await check_flood(message):
        return

    log_command(message)

    await message.reply("""
–Ø - –≤—Ç–æ—Ä–∞—è –≤–µ—Ä—Å–∏—è –º—É–ª—å—Ç–∏–±–æ—Ç–∞ –æ—Ç –∞–≤—Ç–æ—Ä–∞ UsuK.
–í—Ç–æ—Ä–∞—è —Ç–∞–∫ –∫–∞–∫ –ø–µ—Ä–≤–∞—è –≤–µ—Ä—Å–∏—è –±—ã–ª–∞ –Ω–∞–ø–∏—Å–∞–Ω–∞ –Ω–∞ telebot, —ç—Ç–∞ –≤–µ—Ä—Å–∏—è –ø–µ—Ä–µ–ø–∏—Å–∞–Ω–∞ –Ω–∞ aiogram (—Ç–µ–ø–µ—Ä—å —è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–µ–Ω! —Ö–∑ —á—Ç–æ —ç—Ç–æ –∑–Ω–∞—á–∏—Ç).
–°–≤—è–∑–∞—Ç—å—Å—è —Å —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º –º–æ–∂–Ω–æ –≤ Discord: 
–ú–æ–∏ —Ç–µ–∫—É—â–∏–µ –∫–æ–º–∞–Ω–¥—ã —Ç–∞–∫–æ–≤—ã:
/start -- –ø–æ–∑–¥–æ—Ä–æ–≤–∞—Ç—å—Å—è
/help -- –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
/status -- —Å—Ç–∞—Ç—É—Å —Å–≤–æ–µ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞ (–æ–Ω–ª–∞–π–Ω, –∫–æ–ª-–≤–æ –∏–≥—Ä–æ–∫–æ–≤...)
/calc [–∞—Ä–∏—Ñ–º–µ—Ç–∏—á–µ—Å–∫–∏–π –ø—Ä–∏–º–µ—Ä] -- –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä
/echo [–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ] -- —ç—Ö–æ
/cubic -- –∫–∏–Ω—É—Ç—å –∫—É–±–∏–∫
/oreshnik -- —Ä–∞—Å—á–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ –ø–æ–ª–µ—Ç–∞ –±–æ–µ–≤–æ–π —á–∞—Å—Ç–∏ –±–∞–ª–ª–∏—Å—Ç–∏—á–µ—Å–∫–æ–π —Ä–∞–∫–µ—Ç—ã —Å—Ä–µ–¥–Ω–µ–π –¥–∞–ª—å–Ω–æ—Å—Ç–∏ "–û—Ä–µ—à–Ω–∏–∫" –æ—Ç –≤–æ–µ–Ω–Ω–æ–≥–æ –ø–æ–ª–∏–≥–æ–Ω–∞ –ö–∞–ø—É—Å—Ç–∏–Ω –Ø—Ä –¥–æ –ë–µ—Ä–ª–∏–Ω–∞
/myid -- –≤–∞—à telegram id
/bal -- –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å
/casino [—Å—Ç–∞–≤–∫–∞] -- –∫—Ä—É—Ç–∞–Ω—É—Ç—å —Ä—É–ª–µ—Ç–∫—É
""")

@dp.message(Command("status"))
async def send_status(message: Message):
    if await check_flood(message):
        return

    log_command(message)

    url = "https://gmod-servers.com/server/262471/"

    response = requests.get(url)

    bs = BeautifulSoup(response.text, "lxml")
    players_info = bs.find("tbody")
    serverinfo = players_info.text
    data = serverinfo.split()

    status = data[6]
    count = data[12]
    mapname = data[22]
    checked = data[8]

    if count == "Online":
        count = 0
    if mapname == "Version":
        mapname = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

    await message.reply(f"""
üîåIP —Å–µ—Ä–≤–µ—Ä–∞: 95.154.68.79:27015
üü¢–°—Ç–∞—Ç—É—Å: {status}
üéÆ–û–Ω–ª–∞–π–Ω: {count}/32
üó∫Ô∏è–ö–∞—Ä—Ç–∞: {mapname}
üßê–ü–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞: {checked} –º–∏–Ω –Ω–∞–∑–∞–¥
""")

@dp.message(Command("calc"))
async def send_calc(message: Message):
    if await check_flood(message):
        return

    log_command(message)

    try:
        calc_expr = message.text.split(maxsplit=1)[1]

        if not re.fullmatch(r'^[0-9()+\-*/%]+$', calc_expr):    # —Ü–∏—Ñ—Ä—ã, –∫—Ä—É–≥–ª—ã–µ —Å–∫–æ–±–∫–∏, +, -, /, *, %
            await message.reply("–û—à–∏–±–∫–∞: –¥–æ–ø—É—Å—Ç–∏–º—ã —Ç–æ–ª—å–∫–æ —á–∏—Å–ª–∞ –∏ –æ–ø–µ—Ä–∞—Ç–æ—Ä—ã")
        else:
            calc_start_time = time.time()
            calc_expr_result = eval(calc_expr)
            calc_end_time = time.time()

            elapsed_time = (calc_end_time - calc_start_time) * 1000 # –æ—Ç–≤–µ—Ç –≤ –º–∏–ª–ª–∏—Å–µ–∫
            await message.reply(f"""
–û—Ç–≤–µ—Ç: {calc_expr_result}
–í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞ {elapsed_time:.2f} –ºc
""")
    except Exception as err:
        await message.reply(f"–û—à–∏–±–∫–∞: {err}")

@dp.message(Command("echo"))
async def send_echo(message: Message):
    if await check_flood(message):
        return

    log_command(message)

    try:
        if "usuk" in message.text or "—É—Å–∏–∫" in message.text:
            await message.reply("–û—à–∏–±–∫–∞: –ó–∞–ø—Ä–µ—â–µ–Ω–æ –ø–∏—Å–∞—Ç—å –∏–º—è —Å–æ–∑–¥–∞—Ç–µ–ª—è!")
        else:
            await message.reply(message.text.split(maxsplit=1)[1])
    except Exception as err:
        await message.reply(f"–û—à–∏–±–∫–∞: {err}")

@dp.message(Command("cubic"))
async def send_cubic(message: Message):
    if await check_flood(message):
        return

    log_command(message)

    cubic_data = await message.reply_dice("üé≤")
    cubic_value = cubic_data.dice.value

    await asyncio.sleep(4)
    await message.answer(f"–í—ã–ø–∞–ª–æ {cubic_value}!")

@dp.message(Command("oreshnik"))
async def send_oreshnik(message: Message):
    if await check_flood(message):
        return

    log_command(message)

    await message.reply("11-12 –º–∏–Ω—É—Ç")
    await asyncio.sleep(1)
    await message.answer("–•–æ—Ö–ª—ã –ø–∏–¥–æ—Ä—ã")

@dp.message(Command("myid"))
async def send_myid(message: Message):
    if await check_flood(message):
        return

    log_command(message)

    await message.reply(f"–í–∞—à ID: {message.from_user.id}")

@dp.message(Command("bal"))
async def send_bal(message: Message):
    if await check_flood(message):
        return

    log_command(message)

    bal = user_balance.get_balance(message.from_user.id)
    user_data = user_balance.data.get(str(message.from_user.id), {})
    last_refill = user_data.get('last_refill')

    if last_refill:
        next_refill = datetime.fromisoformat(last_refill) + timedelta(minutes=10)
        time_left = next_refill - datetime.now()
        if time_left.total_seconds() > 0:
            mins, secs = divmod(int(time_left.total_seconds()), 60)
            refill_info = f"\n–°–ª–µ–¥—É—é—â–µ–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ —á–µ—Ä–µ–∑: {mins} –º–∏–Ω {secs} —Å–µ–∫"
        else:
            refill_info = "\n–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–æ–∏–∑–æ–π—Ç–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è"
    else:
        refill_info = "\n–ü–µ—Ä–≤–æ–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–æ–π–¥–µ—Ç –≤ —Ç–µ—á–µ–Ω–∏–µ 10 –º–∏–Ω—É—Ç"

    await message.reply(
        f"–í–∞—à –±–∞–ª–∞–Ω—Å: {bal}"
        f"\n–ü–æ–ø–æ–ª–Ω–µ–Ω–∏–µ: +200 –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç"
        f"{refill_info}"
    )

@dp.message(Command("casino"))
async def send_casino(message: Message):
    if await check_flood(message):
        return

    log_command(message)

    try:
        podkrut = 45

        bal = user_balance.get_balance(message.from_user.id)
        bet = int(message.text.split(maxsplit=1)[1])
        win = 0

        if bet < 10:
            await message.reply(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–∞—è —Å—Ç–∞–≤–∫–∞! –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–∞–≤–∫–∞: 10")
            return


        if bal < bet:
            await message.reply(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤! –í–∞—à –±–∞–ª–∞–Ω—Å: {bal}")
            return

        user_balance.update_balance(message.from_user.id, -bet)

        casino_data = await message.reply_dice("üé∞")
        casino_value = casino_data.dice.value

        await asyncio.sleep(2)
        await message.answer(f"–ù–∞–±—Ä–∞–Ω–æ {casino_value} –æ—á–∫–æ–≤!")
        if casino_value == 64:
            win = bet * 5
            await message.answer(f"–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ –î–ñ–ï–ö–ü–û–¢ ({int(win)})!")
        elif casino_value >= podkrut:
            win = bet * (casino_value / 22)
            await message.answer(f"–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ {int(win)}!")
        elif casino_value < podkrut:
            await message.answer("–í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏!")

        new_bal = user_balance.update_balance(message.from_user.id, int(win))
        await message.answer(f"–í–∞—à –±–∞–ª–∞–Ω—Å: {new_bal}")
    except Exception as err:
        await message.reply(f"–û—à–∏–±–∫–∞ {err}")

@dp.message()
async def log_all_messages(message: Message):
    if await check_flood(message):
        return

    logger.info(f"Message: {message.text[:50]} | User: {message.from_user.id} | Username: @{message.from_user.username}")


async def main():
    await dp.start_polling(bot)
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")


if __name__ == "__main__":
    asyncio.run(main())